##
## Reindeer Config
##
## This file sets all of Reindeer's basic configuration. This file also marks
## the top of the reindeer-managed directory, as all other paths are relative to
## this one (both paths mentioned in this file, and implicit).
##
## Reindeer is under active development, and the layout and options in this file
## may change.

# Write output to third-party/BUCK
third_party_dir = "third-party"

# Parse Rust code to work out the precise set of source files for each crate.
# This uses `srcfiles` which only works on Rust 2018 and without some macro
# constructions. It works in almost all cases, but you may need to have a
# fixups.toml adding extra srcs if it fails.
precise_srcs = true

# Possible patterns for license files - lots of packages have them without
# registering them in the Cargo metadata, or have more than the single file it
# allows. Just look in the top-level dir for now.
license_patterns = ["LICENSE*", "COPYING*", "UNLICENSE*"]

# Include an explicit public top-level target which depends on all other library
# targets, so that you can to a test/check build.
include_top_level = true

# Configuration for vendoring
#
# You can instead set `vendor = false` to make Reindeer-generated targets not
# build from the vendored sources, but instead download sources from crates.io
# at build time.
[vendor]
# Exclude files listed in the .gitignore in this directory
gitignore_checksum_exclude = [".gitignore"]
# Additional globs to ignore (prefer .gitignore for consistentcy with source
# control)
checksum_exclude = []

# Platforms we want to support.
#
# A Reindeer platform is a collection of predicates, which are closely related
# to rustc/cargo's notion of a platform. If a conditional dependency matches
# against a platform's predicates, then it is included in the platform-specific
# dependencies in the rule.
#
# These same platforms and predicates are used in fixups.toml files, for
# platform-specific fixups (such as additional dependencies, extra sources,
# options, etc).
#
# A platform's name, like "linux-x86_64", corresponds to one of the strings
# produced by the `select` expression in prelude/rust/cargo_package.bzl. If you
# set up your own platforms with custom names, you will also need your own
# macros that call into cargo_package.bzl's platform handling code with your own
# `select` that recognizes your custom platforms. For example:
#
#     load("@prelude//rust:cargo_package.bzl", "apply_platform_attrs", "cargo")
#
#     PLATFORMS = select({
#         ...
#     })
#
#     def rust_library(platform = {}, **kwargs):
#         kwargs = apply_platform_attrs(platform, kwargs, PLATFORMS)
#         cargo.rust_library(**kwargs)
#
# If `target = "..."` is provided for a platform (like the ones here), Reindeer
# will run `rustc --print=cfg --target={target}` to obtain platform predicates,
# for example things like `target_endian = "little"`.
#
# Whether or not a `target` is provided, additional platform predicates can be
# specified here. For example:
#
#     [platform.centos-x86_64]
#     target = "x86_64-unknown-linux-gnu"
#     target_env = ["gnu", "centos"]
#
# On this platform, crates will receive dependencies listed under a
# `[target.'cfg(target_env = "centos")'.dependencies]` section in Cargo.toml,
# and plaform-specific `['cfg(target_env = "centos")']` fixups.toml will take
# effect.
#
# By default, Reindeer treats all platforms as not being configured for
# cross-compilation. Consider a crate A with a dependency on B, and also a
# build-dependency or proc macro dependency on a crate C, where C depends on B
# and enables some non-default feature of B. In this situation, by default, A's
# dependency on B would see that feature enabled. For no-std platforms or
# cross-compilation, this is not what you want. Crates on the no-std target
# platform should be able to have build scripts and proc macros that use std on
# the execution platform (host platform or RE platform) without causing various
# crates' std features to be enabled on the no-std target platform. To support
# cross-compilation, every platform must define `execution-platform = true` or
# `execution-platform = false`.
#
#     [platform.linux-x86_64]
#     target = "x86_64-unknown-linux-gnu"
#     execution-platform = true
#
#     [platform.riscv64gc]
#     target = "riscv64gc-unknown-none-elf"
#     execution-platform = false
#
# Features and optional dependencies enabled by a build script or proc macro on
# a platform with `execution-platform = false` will not apply to that platform.
# They will be applied instead to every `execution-platform = true` platform.

[platform.linux-x86_64]
target = "x86_64-unknown-linux-gnu"

[platform.fortanix-sgx]
target = "x86_64-fortanix-unknown-sgx"

[platform.macos]
target = "x86_64-apple-darwin"

[platform.macos-arm64]
target = "aarch64-apple-darwin"

[platform.windows-msvc]
target = "x86_64-pc-windows-msvc"

[platform.windows-gnu]
target = "x86_64-pc-windows-gnu"

# Configuration for cargo (used both for vendoring and resolving dependencies)
[cargo]
# Path to cargo, relative to this file. Can also be specified on the
# command-line. Defaults to plain "cargo".
# cargo = "path/to/cargo"

# Path to rustc, relative to this file. Can also be specified on the
# command-line. Used to set RUSTC env when invoking cargo.
# rustc = "path/to/rustc"

# Support Cargo's unstable "artifact dependencies" functionality, RFC 3028.
# This requires a version of Cargo containing
# https://github.com/rust-lang/cargo/pull/11550.
# bindeps = false

# Configuration for generated BUCK file
[buck]
# Name of the generated file
file_name = "BUCK" # default

# Rules used for various kinds of targets. These rules don't directly
# correspond with BUCK rules - they have extra attributes such as
# per-platform settings. The intent is that you provide a set of macro
# definitions which resolve them to appropriate underlying rules
# suitable for your environment. (This may also work for Buck-like
# build systems such as Bazel.)
rust_library = "cargo_rust_library"                            # A plain Rust library
rust_binary = "cargo.rust_binary"                              # A Rust executable
cxx_library = "third_party_rust_cxx_library"                   # A C++ library (mostly for Rust -> C dependencies)
prebuilt_cxx_library = "third_party_rust_prebuilt_cxx_library" # A prebuilt library (mostly for Rust -> C dependencies)
buildscript_genrule = "buildscript_run"                        # Rule for running a build script to produce rustc args and generated sources

# Load the macros to which the rules above will resolve.
buckfile_imports = """
load("@prelude//rust:cargo_buildscript.bzl", "buildscript_run")
load("@prelude//rust:cargo_package.bzl", "cargo")
load("//third-party/macros:rust_third_party.bzl", "cargo_rust_library", "third_party_rust_cxx_library", "third_party_rust_prebuilt_cxx_library")
"""

# Banner comment for the generated BUCK File.
generated_file_header = """
##
## \u0040generated by reindeer
## Do not edit by hand.
##
## See README.md for directions on how to update this.
##
"""
