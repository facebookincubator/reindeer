##
## Reindeer Config
##
## This file sets all of Reindeer's basic configuration. This file also marks
## the top of the reindeer-managed directory, as all other paths are relative to
## this one (both paths mentioned in this file, and implicit).
##
## Reindeer is under active development, and the layout and options in this file
## may change.

# Parse Rust code to work out the precise set of source files for each crate.
# This uses `srcfiles` which only works on Rust 2018 and without some macro
# constructions. It works in almost all cases, but you may need to have a
# fixups.toml adding extra srcs if it fails.
precise_srcs = true

# Possible patterns for license files - lots of packages have them without
# registering them in the Cargo metadata, or have more than the single file it
# allows. Just look in the top-level dir for now.
license_patterns = [
  "LICENSE*", "COPYING*", "UNLICENSE*",
]

# If a fixups.toml file is needed (eg, the package has a build.rs), then
# generate a template fixups.toml to be edited.
fixup_templates = true

# Emit Cargo pkg metadata into rules (experimental, not used)
#emit_metadata = false

# Include an explicit public top-level target which depends on all other library
# targets, so that you can to a test/check build.
include_top_level = true

# Configuration for vendoring
#
# You can instead set `vendor = false` to make Reindeer-generated targets not
# build from the vendored sources, but instead download sources from crates.io
# at build time.
[vendor]
# Exclude files listed in the .gitignore in this directory
gitignore_checksum_exclude = [".gitignore"]
# Additional globs to ignore (prefer .gitignore for consistentcy with source
# control)
checksum_exclude = [
]

# Configuration for rustsec auditing
[audit]
# Name of a package which is expected to always have an advisory to make sure
# the mechanism is working.
never_autofix = [
  "rustsec-example-crate", # never fix because this is a canary
]

# Platforms we want to support.
#
# A Reindeer platform is a collection of predicates, which are closely related
# to rustc/cargo's notion of a platform. If a conditional dependency matches
# against a platform's predicates, then it is included in the platform-specific
# dependencies in the rule.
#
# These same platforms and predicates are used in fixups.toml files, for
# platform-specific fixups (such as additional dependencies, extra sources,
# options, etc).
#
# Listed properties are a set of values, any of which can match a predicate.
# These match specific configurations of rustc, as shown with `rustc --target
# <TARGET> --print cfg`. Unlisted properties are "don't care" or "match
# anything"
#
# The platform key sets the name of the platform in `platform_deps` /
# `named_platform_deps`. If it is "DEFAULT" then the platform's dependencies are
# put into the normal `deps` / `named_deps`.

# x86_64-unknown-linux-gnu
[platform.linux-x86_64]
x86_64-unknown-linux-gnu = [] # true for a boolean test
target_arch = ["x86_64"]
target_endian = ["little"]
target_env = ["gnu"]
target_family = ["unix"]
target_feature = ["fxsr", "sse", "sse2"]
target_has_atomic = ["8", "16", "32", "64", "ptr"]
target_os = ["linux"]
target_pointer_width = ["64"]
target_vendor = ["unknown"]

# Fortanix SGX
[platform.fortanix-sgx]
x86_64-fortanix-unknown-sgx = []
target_arch = ["x86_64"]
target_endian = ["little"]
target_env = ["sgx"]
target_feature = ["fxsr", "rdrand", "rdseed", "sse", "sse2"]
target_has_atomic = ["8", "16", "32", "64", "ptr"]
target_os = ["unknown"]
target_pointer_width = ["64"]
target_vendor = ["fortanix"]

# macOS - x86_64-apple-darwin
[platform.macos]
x86_64-apple-darwin = []
target_arch = ["x86_64"]
target_endian = ["little"]
target_env = []
target_family = ["unix"]
target_feature = ["cmpxchg16b", "fxsr", "sse", "sse2", "sse3", "ssse3"]
target_has_atomic = ["8", "16", "32", "64", "128", "ptr"]
target_os = ["macos"]
target_pointer_width = ["64"]
target_vendor = ["apple"]

# Windows with MSVC toolchain - x86_64-pc-windows-msvc
[platform.windows]
x86_64-pc-windows-msvc = []
target_arch = ["x86_64"]
target_endian = ["little"]
target_env = ["msvc"]
target_family = ["windows"]
target_feature = ["fxsr", "sse", "sse2"]
target_has_atomic = ["8", "16", "32", "64", "ptr"]
target_os = ["windows"]
target_pointer_width = ["64"]
target_vendor = ["pc"]

# Windows with GNU toolchain - x86_64-pc-windows-gnu
[platform.windows-gnu]
x86_64-pc-windows-gnu = []
target_arch = ["x86_64"]
target_endian = ["little"]
target_env = ["gnu"]
target_family = ["windows"]
target_feature = ["fxsr", "sse", "sse2"]
target_has_atomic = ["8", "16", "32", "64", "ptr"]
target_os = ["windows"]
target_pointer_width = ["64"]
target_vendor = ["pc"]

# Configuration for cargo (used both for vendoring and resolving dependencies)
[cargo]
# Path to cargo, relative to this file. Can also be specified on the
# command-line. Defaults to plain "cargo".
# cargo = "path/to/cargo"

# Path to rustc, relative to this file. Can also be specified on the
# command-line. Used to set RUSTC env when invoking cargo.
# rustc = "path/to/rustc"

# Support Cargo's unstable "artifact dependencies" functionality, RFC 3028.
# This requires a version of Cargo containing
# https://github.com/rust-lang/cargo/pull/11550.
# bindeps = false

# Configuration for generated BUCK file
[buck]
# Name of the generated file
file_name = "BUCK" # default

# Rules used for various kinds of targets. These rules don't directly
# correspond with BUCK rules - they have extra attributes such as
# per-platform settings. The intent is that you provide a set of macro
# definitions which resolve them to appropriate underlying rules
# suitable for your environment. (This may also work for Buck-like
# build systems such as Bazel.)
rust_library = "cargo.rust_library"       # A plain Rust library
rust_binary = "cargo.rust_binary"         # A Rust executable
cxx_library = "third_party_rust_cxx_library"    # A C++ library (mostly for Rust -> C dependencies)
prebuilt_cxx_library = "third_party_rust_prebuilt_cxx_library"    # A prebuilt library (mostly for Rust -> C dependencies)
buildscript_genrule = "buildscript_run"    # Rule for running a build script to produce rustc args and generated sources

# Load the macros to which the rules above will resolve.
buckfile_imports = """
load("@prelude//rust:cargo_buildscript.bzl", "buildscript_run")
load("@prelude//rust:cargo_package.bzl", "cargo")
load("//third-party/macros:rust_third_party.bzl", "third_party_rust_cxx_library", "third_party_rust_prebuilt_cxx_library")
"""

# Banner comment for the generated BUCK File.
generated_file_header = """
##
## \u0040generated by reindeer
## Do not edit by hand.
##
## See README.md for directions on how to update this.
##
"""
